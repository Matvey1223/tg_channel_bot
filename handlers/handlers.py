import time
from datetime import datetime
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from keyboards import inline_keyboard
from database import database as db
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from script import ParseSourcesTg
import asyncio
from loguru import logger
import random
import os

router = Router()

class AddSource(StatesGroup):
    url = State()


@router.message(CommandStart())
async def start(message: Message):
    db.add_user(message.from_user.id, message.from_user.username)
    await message.bot.send_photo(message.chat.id,
                                 photo=FSInputFile('bitcoin-logo.jpg'),
                                 caption='–ü—Ä–∏–≤–µ—Ç <b>–ì–ª–µ–±</b> –∏ <b>–ú–∞—Ç–≤–µ–π</b>. \n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–ø–ª–∞–≥–∏–∞—á—É –¥–ª—è –≤–∞—ÅüòÅ.',
                                 reply_markup=inline_keyboard.create_inline_kb(1, '–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏', '–ù–æ–≤–æ—Å—Ç–∏'))


@router.callback_query(F.data == '–ù–æ–≤–æ—Å—Ç–∏')
async def send_news(callback: CallbackQuery):
    await callback.message.answer('<b>–û–∂–∏–¥–∞–π—Ç–µ...</b>\n–°–æ–±–∏—Ä–∞—é –¥–ª—è –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤‚ö†')

    parser = ParseSourcesTg()
    parser.gpt_request()
        # await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ö†Ô∏è.\n<b>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞–∂–∞—Ç–∏–µ</b>')
        # logger.error(ex)
        # db.clear_news_table()
    news = db.select_news_gpt()
    imgs = db.select_news()
    for i in range(len(news)):
        try:
            await callback.message.bot.send_photo(chat_id=1190679768, photo=imgs[i][2],
                                                caption=f'<b>–ò—Å—Ç–æ—á–Ω–∏–∫</b>: {news[i][0]}\n<b>–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å</b>: {news[i][1]}',
                                                reply_markup=inline_keyboard.create_inline_kb(1, '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
                                                                                              '–ù–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'))
            await callback.message.bot.send_photo(chat_id=871709880, photo=imgs[i][2],
                                                caption=f'<b>–ò—Å—Ç–æ—á–Ω–∏–∫</b>: {news[i][0]}\n<b>–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å</b>: {news[i][1]}',
                                                reply_markup=inline_keyboard.create_inline_kb(1, '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
                                                                                              '–ù–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'))
        except Exception as ex:
            logger.error(ex)
            await callback.message.answer(text = '–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –ø—Ä–æ—á–∏—Ç–∞–ª–æ—Å—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=inline_keyboard.create_inline_kb(1, '–£–¥–∞–ª–∏—Ç—å'))
    db.clear_news_gpt()
    db.clear_news_table()

@router.callback_query(F.data == '–£–¥–∞–ª–∏—Ç—å')
async def no_public(callback: CallbackQuery):
    await callback.message.delete(inline_message_id=callback.inline_message_id)

@router.callback_query(F.data == '–ù–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')
async def no_public(callback: CallbackQuery):
    await callback.message.delete(inline_message_id=callback.inline_message_id)

@router.callback_query(F.data == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')
async def public(callback: CallbackQuery):
    text = callback.message.caption.split('\n')[1].replace('–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å: ', '')
    photo = callback.message.photo[0].file_id
    await callback.message.bot.send_photo(chat_id=-1001745374968, photo=photo, caption = '<b>üí≤–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ - –ê—Ä–±–∏—Ç—Ä–∞–∂üí≤</b>\n\n' + text)
    await callback.message.delete()


@router.callback_query(StateFilter(None), F.data == '–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏')
async def add_source(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    await state.set_state(AddSource.url)

@router.message(AddSource.url, F.text)
async def add_source1(message: Message, state:FSMContext):
    await state.update_data(url = message.text)
    data = await state.get_data()
    db.add_source(data['url'])
    await message.answer('<b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω</b>')
    await state.clear()



